{"version":3,"sources":["components/recipe.component.js","components/title.component.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","ingredients","convertCalorie","totalNutrients","Math","round","className","src","alt","map","ingredient","text","Titles","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","async","fetch","process","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAoBeA,EAlBA,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,MAAOC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,YAEhCC,GAFkE,EAArBC,eAE5BC,KAAKC,MAAMN,IAElC,OACI,6BACI,8BAAM,wBAAIO,UAAU,WAAWR,IAC/B,8BAAM,yBAAKQ,UAAU,qBAAqBC,IAAKP,EAAOQ,IAAI,UAC1D,8BAAM,wCAAcN,IACpB,8BAAM,4BACDD,EAAYQ,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,aCJrBC,EAPA,kBACX,6BACI,wBAAIN,UAAU,0BAAd,iBACA,wBAAIA,UAAU,6BAAd,iEC2EOO,EAvEH,WAAO,IAAD,EAEcC,mBAAS,IAFvB,mBAETC,EAFS,KAEAC,EAFA,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAQUJ,mBAAS,IARnB,mBAQTK,EARS,KAQFC,EARE,KAWhBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAa,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACME,MAAM,mCAAD,OAAoCN,EAApC,mBAAoDO,WAApD,oBAA4FA,mCAA5F,mBADX,cACXC,EADW,kBAAAJ,EAAA,MAGEI,EAASC,QAHX,OAGXC,EAHW,OAIjBb,EAAWa,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MALA,sCAwBnB,OACE,yBAAKxB,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,6DACb,yBAAKA,UAAU,eACb,0BAAM2B,SAjBI,SAAAC,GAEhBA,EAAEC,iBACFf,EAASH,GAETC,EAAU,KAYuBZ,UAAU,eACnC,2BAAOA,UAAU,aAAa8B,KAAK,OAAOC,MAAOpB,EAAQqB,SAvB9C,SAAAJ,GACnBhB,EAAUgB,EAAEK,OAAOF,UAuBX,4BAAQ/B,UAAU,gBAAgB8B,KAAK,UAAvC,YAGJ,yBAAK9B,UAAU,yBACb,yBAAKA,UAAU,gBACZS,EAAQN,KAAI,SAAA+B,GAAM,OACjB,kBAAC,EAAD,CACEC,IAAKD,EAAOA,OAAOE,MACnB5C,MAAO0C,EAAOA,OAAOE,MACrB1C,MAAOwC,EAAOA,OAAOxC,MACrBD,SAAUyC,EAAOA,OAAOzC,SACxBE,YAAauC,EAAOA,OAAOvC,sBCxDvB0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9901769d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Recipe = ({ title, calories, image, ingredients, totalNutrients }) => {\n\n    const convertCalorie = Math.round(calories)\n\n    return (\n        <div>\n            <span><h3 className='heading'>{title}</h3></span>\n            <span><img className='rounded-circle pic' src={image} alt='food' /></span>\n            <span><p>Calories: {convertCalorie}</p></span>\n            <span><ol>\n                {ingredients.map(ingredient => (\n                    <li>{ingredient.text}</li>\n                ))}\n            </ol></span>\n        </div>\n    )\n}\n\nexport default Recipe;","import React from \"react\";\n\nconst Titles = () => (\n    <div>\n        <h1 className=\"title-container__title\">Recipe Finder</h1>\n        <h3 className=\"title-container__subtitle\">Find your favourite recipes, health information and more...</h3>\n    </div>\n);\n\nexport default Titles;","import React, { useEffect, useState } from 'react';\nimport Recipe from './components/recipe.component';\nimport Titles from './components/title.component';\n\n\n\nimport './App.css';\n\n\nconst App = () => {\n\n  const [recipes, setRecipes] = useState([]);\n\n  //state for search element\n  const [search, setSearch] = useState('');\n\n  //state to ensure our search only submits after button is clicked, not on each key entered. Saves us API reqs.\n  const [query, setQuery] = useState('');\n\n  //second argument array makes useEffect function run. Empty = run once. Query means it runs when we hit submit button.\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${process.env.REACT_APP_API_ID}&app_key=${process.env.REACT_APP_API_KEY}&from=0&to=30`)\n    //convert data to json, easy to work with\n    const data = await response.json();\n    setRecipes(data.hits)\n    console.log(data.hits)\n  }\n\n  //onChange function for input search element\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  //run upon form submission\n  const getSearch = e => {\n    //stop page refresh on submission\n    e.preventDefault();\n    setQuery(search);\n    //set search back to empty string\n    setSearch('');\n  }\n\n\n\n  return (\n    <div className='row'>\n      <div className='col-md-5 title-container'>\n        <Titles />\n      </div>\n      <div className='App col-md-7 form-container d-flex justify-content-center'>\n        <div className='row mr-auto'>\n          <form onSubmit={getSearch} className='search-form'>\n            <input className='search-bar' type='text' value={search} onChange={updateSearch} />\n            <button className='search-button' type='submit'>Search</button>\n          </form>\n        </div>\n        <div className='recipes row flex-wrap'>\n          <div className=' .customized'>\n            {recipes.map(recipe => (\n              <Recipe\n                key={recipe.recipe.label}\n                title={recipe.recipe.label}\n                image={recipe.recipe.image}\n                calories={recipe.recipe.calories}\n                ingredients={recipe.recipe.ingredients}\n              /* totalNutrients={recipe.recipe.totalNutrients} */\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')); // check\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}